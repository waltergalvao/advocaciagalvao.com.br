/* Additional styles */
@import "additional-styles/utility-patterns.css";
@import "additional-styles/range-slider.css";
@import "additional-styles/toggle-switch.css";
@import "additional-styles/theme.css";

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Additional Tailwind directives: https://tailwindcss.com/docs/functions-and-directives/#responsive */
@layer utilities {
  .rtl {
    direction: rtl;
  }
}

@layer base {
  /**
   * Shiki 
   */
  pre.shiki {
    counter-reset: line-number;
  }

  pre.shiki code {
    display: grid;
  }

  html pre.shiki,
  html pre.shiki span {
    color: var(--shiki-dark) !important;
  }

  pre.shiki .line {
    counter-increment: line-number;
  }

  pre.shiki .line:not(:last-of-type)::before {
    content: counter(line-number);
    color: hsl(240 5.3% 26.1%);
    display: inline-block;
    text-align: right;
    margin-right: 1em;
    width: 2ch;
  }

  html pre.shiki .line:not(:last-of-type)::before {
    color: hsl(240 5% 64.9%);
  }

  html pre.shiki .diff.add {
    background-color: hsla(143.8 61.2% 20.2% / 0.7);
  }
  html pre.shiki .diff.remove {
    background-color: hsla(0 62.8% 30.6% / 0.7);
  }

  .prose {
    color: var(--tw-prose-body);
    max-width: none;
  }
  .prose :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  .prose
    :where([class~="lead"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: var(--tw-prose-lead);
    font-size: 1rem;
    line-height: 1.5;
    margin-top: 1.2em;
    margin-bottom: 1.2em;
    letter-spacing: -0.01em;
  }
  .prose :where(a):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-links);
    -webkit-text-decoration: underline transparent;
    text-decoration: underline transparent;
    font-weight: 500;
    transition-property: color, text-decoration-color;
    transition-duration: 150ms;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  .prose
    :where(a):not(:where([class~="not-prose"], [class~="not-prose"] *)):hover {
    color: var(--tw-prose-links-hover);
    text-decoration-color: var(--tw-prose-links-underline);
  }
  .prose
    :where(strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-bold);
    font-weight: 600;
  }
  .prose
    :where(a strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
  }
  .prose
    :where(blockquote strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose
    :where(thead th strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose :where(ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    list-style-type: decimal;
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
    padding-inline-start: 1.625em;
    padding-left: 1.625rem;
  }
  .prose
    :where(ol[type="A"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-alpha;
  }
  .prose
    :where(ol[type="a"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-alpha;
  }
  .prose
    :where(ol[type="A" s]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-alpha;
  }
  .prose
    :where(ol[type="a" s]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-alpha;
  }
  .prose
    :where(ol[type="I"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-roman;
  }
  .prose
    :where(ol[type="i"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-roman;
  }
  .prose
    :where(ol[type="I" s]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-roman;
  }
  .prose
    :where(ol[type="i" s]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-roman;
  }
  .prose
    :where(ol[type="1"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: decimal;
  }
  .prose :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    list-style-type: disc;
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
    padding-inline-start: 1.625em;
    padding-left: 1.625rem;
  }
  .prose
    :where(ol > li):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::marker {
    font-weight: 400;
    color: var(--tw-prose-counters);
  }
  .prose
    :where(ul > li):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::marker {
    color: var(--tw-prose-bullets);
  }
  .prose :where(dt):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.25em;
  }
  .prose :where(hr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-color: var(--tw-prose-hr);
    border-top-width: 1px;
    margin-top: 4rem;
    margin-bottom: 4rem;
    max-width: none;
  }
  .prose
    :where(blockquote):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: 500;
    font-style: italic;
    color: var(--tw-prose-quotes);
    border-inline-start-width: 0.25rem;
    border-inline-start-color: var(--tw-prose-quote-borders);
    quotes: "\201C""\201D""\2018""\2019";
    margin-top: 2rem;
    margin-bottom: 2rem;
    padding-inline-start: 1em;
    border-left-width: 0.25rem;
    border-left-color: var(--tw-prose-quote-borders);
    padding-left: 1.25rem;
  }
  .prose
    :where(blockquote p:first-of-type):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::before {
    content: open-quote;
  }
  .prose
    :where(blockquote p:last-of-type):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::after {
    content: close-quote;
  }
  .prose :where(h1):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 700;
    font-size: 1.5rem;
    margin-top: 0;
    margin-bottom: 0.5rem;
    line-height: 1.415;
    letter-spacing: -0.01em;
  }
  .prose
    :where(h1 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: 900;
    color: inherit;
  }
  .prose :where(h2):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    font-size: 1.5rem;
    margin-top: 3rem;
    margin-bottom: 0.5rem;
    line-height: 1.415;
    letter-spacing: -0.01em;
  }
  .prose
    :where(h2 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: 800;
    color: inherit;
  }
  .prose :where(h3):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    font-size: 1rem;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    line-height: 1.5;
    letter-spacing: -0.01em;
  }
  .prose
    :where(h3 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: 700;
    color: inherit;
  }
  .prose :where(h4):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    line-height: 1.5;
  }
  .prose
    :where(h4 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: 700;
    color: inherit;
  }
  .prose :where(img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }
  .prose
    :where(picture):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    display: block;
    margin-top: 2em;
    margin-bottom: 2em;
  }
  .prose
    :where(video):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }
  .prose :where(kbd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    font-weight: 500;
    font-family: inherit;
    color: var(--tw-prose-kbd);
    box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%),
      0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
    font-size: 0.875em;
    border-radius: 0.3125rem;
    padding-top: 0.1875em;
    padding-inline-end: 0.375em;
    padding-bottom: 0.1875em;
    padding-inline-start: 0.375em;
  }
  .prose
    :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-code);
    font-weight: 600;
    font-size: 0.875em;
    border-radius: 0.5rem;
    padding-top: 0.25rem;
    padding-right: 0.375rem;
    padding-bottom: 0.25rem;
    padding-left: 0.375rem;
    box-shadow: inset 0 0 0 1px var(--tw-prose-code-ring);
    background-color: var(--tw-prose-code-bg);
  }
  .prose
    :where(code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::before {
    content: "`";
  }
  .prose
    :where(code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::after {
    content: "`";
  }
  .prose
    :where(a code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
  }
  .prose
    :where(h1 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
  }
  .prose
    :where(h2 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
    font-size: 1rem;
    font-weight: inherit;
  }
  .prose
    :where(h3 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.875rem;
    font-weight: inherit;
  }
  .prose
    :where(h4 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
  }
  .prose
    :where(blockquote code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose
    :where(thead th code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose :where(pre):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-pre-code);
    background-color: var(--tw-prose-pre-bg);
    overflow-x: auto;
    font-weight: 400;
    font-size: 0.875em;
    line-height: 1.7142857;
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
    border-radius: 0.375rem;
    padding-top: 0.8571429em;
    padding-inline-end: 1.1428571em;
    padding-bottom: 0.8571429em;
    padding-inline-start: 1.1428571em;
  }
  .prose
    :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    background-color: transparent;
    border-width: 0;
    border-radius: 0;
    padding: 0;
    font-weight: inherit;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
  }
  .prose
    :where(pre code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::before {
    content: none;
  }
  .prose
    :where(pre code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::after {
    content: none;
  }
  .prose
    :where(table):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    width: 100%;
    table-layout: auto;
    margin-top: 2rem;
    margin-bottom: 2rem;
    font-size: 0.875em;
    line-height: 1.5rem;
    text-align: left;
  }
  .prose
    :where(thead):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-th-borders);
  }
  .prose
    :where(thead th):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    font-weight: 600;
    vertical-align: bottom;
    padding-inline-end: 0.5714286em;
    padding-bottom: 0.5rem;
    padding-inline-start: 0.5714286em;
    padding-right: 0.5rem;
    padding-left: 0.5rem;
  }
  .prose
    :where(tbody tr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-td-borders);
  }
  .prose
    :where(tbody tr:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    border-bottom-width: 0;
  }
  .prose
    :where(tbody td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    vertical-align: baseline;
  }
  .prose
    :where(tfoot):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-top-width: 1px;
    border-top-color: var(--tw-prose-th-borders);
  }
  .prose
    :where(tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    vertical-align: top;
  }
  .prose
    :where(th, td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    text-align: start;
  }
  .prose
    :where(figure > *):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
    margin-bottom: 0;
  }
  .prose
    :where(figcaption):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: var(--tw-prose-captions);
    font-size: 0.75rem;
    line-height: 1.5;
    margin-top: 0.5rem;
  }
  .prose {
    --tw-prose-body: #374151;
    --tw-prose-headings: #1e293b;
    --tw-prose-lead: #4b5563;
    --tw-prose-links: #0ea5e9;
    --tw-prose-bold: #1e293b;
    --tw-prose-counters: #64748b;
    --tw-prose-bullets: #52525b;
    --tw-prose-hr: rgb(30 41 59 / 0.05);
    --tw-prose-quotes: #64748b;
    --tw-prose-quote-borders: #3f3f46;
    --tw-prose-captions: #64748b;
    --tw-prose-kbd: #111827;
    --tw-prose-kbd-shadows: 17 24 39;
    --tw-prose-code: #1e293b;
    --tw-prose-pre-code: #e5e7eb;
    --tw-prose-pre-bg: #1f2937;
    --tw-prose-th-borders: #52525b;
    --tw-prose-td-borders: #3f3f46;
    --tw-prose-invert-body: #d1d5db;
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: #9ca3af;
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: #9ca3af;
    --tw-prose-invert-bullets: #4b5563;
    --tw-prose-invert-hr: #374151;
    --tw-prose-invert-quotes: #f3f4f6;
    --tw-prose-invert-quote-borders: #374151;
    --tw-prose-invert-captions: #9ca3af;
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: #d1d5db;
    --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
    --tw-prose-invert-th-borders: #4b5563;
    --tw-prose-invert-td-borders: #374151;
    font-size: 1rem;
    line-height: 1.75rem;
  }
  .prose
    :where(picture > img):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
    margin-bottom: 0;
  }
  .prose :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
  .prose
    :where(ol > li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    padding-inline-start: 0.375em;
  }
  .prose
    :where(ul > li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    padding-inline-start: 0.375em;
  }
  .prose
    :where(.prose > ul > li p):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0.75rem;
    margin-bottom: 0.75rem;
  }
  .prose
    :where(.prose > ul > li > p:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25em;
  }
  .prose
    :where(.prose > ul > li > p:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25em;
  }
  .prose
    :where(.prose > ol > li > p:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25em;
  }
  .prose
    :where(.prose > ol > li > p:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25em;
  }
  .prose
    :where(ul ul, ul ol, ol ul, ol ol):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0.75rem;
    margin-bottom: 0.75rem;
  }
  .prose :where(dl):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
  }
  .prose :where(dd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0.5em;
    padding-inline-start: 1.625em;
  }
  .prose
    :where(hr + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0;
  }
  .prose
    :where(h2 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0;
  }
  .prose
    :where(h3 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0;
  }
  .prose
    :where(h4 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0;
  }
  .prose
    :where(thead th:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-start: 0;
    padding-left: 0;
  }
  .prose
    :where(thead th:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-end: 0;
    padding-right: 0;
  }
  .prose
    :where(tbody td, tfoot td):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-top: 0.5714286em;
    padding-inline-end: 0.5714286em;
    padding-bottom: 0.5714286em;
    padding-inline-start: 0.5714286em;
  }
  .prose
    :where(tbody td:first-child, tfoot td:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-start: 0;
  }
  .prose
    :where(tbody td:last-child, tfoot td:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-end: 0;
  }
  .prose
    :where(figure):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }
  .prose
    :where(.prose > :first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0 !important;
  }
  .prose
    :where(.prose > :last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 0 !important;
  }
  .prose {
    --tw-prose-links-hover: #334155;
    --tw-prose-links-underline: rgb(30 41 59 / 0.3);
    --tw-prose-code-bg: rgb(63 63 70 / 0.15);
    --tw-prose-code-ring: rgb(30 41 59 / 0.1);
  }
  .prose
    :where(:is(ol, ul) > li):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-left: 0.375rem;
  }
  .prose
    :where(.prose > ul > li > *:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25rem;
  }
  .prose
    :where(.prose > ul > li > *:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25rem;
  }
  .prose
    :where(.prose > ol > li > *:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25rem;
  }
  .prose
    :where(.prose > ol > li > *:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25rem;
  }
  .prose
    :where(img, video, figure):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
  .prose
    :where(:is(tbody, tfoot) td):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-top: 0.5rem;
    padding-right: 0.5rem;
    padding-bottom: 0.5rem;
    padding-left: 0.5rem;
  }
  .prose
    :where(:is(tbody, tfoot) td:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-left: 0;
  }
  .prose
    :where(:is(tbody, tfoot) td:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-right: 0;
  }
  .prose
    :where(:is(h1, h2, h3) a):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    font-weight: inherit;
  }
  .prose
    :where(:is(a, blockquote, thead th) strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose
    :where(:is(a, h1, h2, h3, blockquote, thead th) code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }
  .prose
    :where(:is(h1, h2, h3) + *):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
  }
}
